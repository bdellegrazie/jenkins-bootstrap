---
version: '3.9'

services:
  alertmanager:
    image: 'quay.io/prometheus/alertmanager:v0.25.0'
    container_name: 'alertmanager'
    command:
      - --config.file=/etc/alertmanager/config.yml
      - --storage.path=/alertmanager
      - --cluster.listen-address=
    volumes:
      - 'alertmanager-data:/alertmanager'
      - './alertmanager/:/etc/alertmanager/:ro'
    ports:
      - '${ALERTMANAGER_PORT}:9093'
    healthcheck:
      test: ["CMD-SHELL", 'wget -q --spider http://127.0.0.1:9093/-/ready || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  #cadvisor:
  #  image: 'gcr.io/cadvisor/cadvisor:v0.47.0'
  #  container_name: 'cadvisor'
  #  privileged: true
  #  expose:
  #    - '8080'
  #  volumes:
  #    - '/:/rootfs:ro'
  #    - '/var/run:/var/run:ro'
  #    - '/sys:/sys:ro'
  #    - '/var/lib/docker/:/var/lib/docker/:ro'
  #    - '/dev/disk/:/dev/disk:ro'
  #  devices:
  #    - '/dev/kmsg:/dev/kmsg'
  #  healthcheck:
  #    test: 'wget -q --spider http://127.0.0.1:8080/containers/ || exit 1'
  #    interval: 30s
  #    timeout: 10s
  #    retries: 3
  #    start_period: 10s

  grafana:
    image: 'grafana/grafana-oss:10.0.0'
    container_name: 'grafana'
    secrets:
      - db_grafanaro
    volumes:
      - 'grafana-data:/var/lib/grafana'
      - './grafana/provisioning:/etc/grafana/provisioning:ro'
    environment:
      GF_ALERTING_ENABLED: 'false'
      GF_ANALYTICS_CHECK_FOR_UPDATES: 'false'
      GF_ANALYTICS_REPORTING_ENABLED: 'false'
      GF_ANALYTICS_FEEDBACK_LINKS_ENABLED: 'false'
      #GF_INSTALL_PLUGINS: ''
      #GF_LOG_FILTERS: 'rendering:debug'
      GF_LOG_LEVEL: 'warn'
      GF_LOG_MODE: 'console'
      #GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: ''
      #GF_PLUGINS_ENABLE_ALPHA: ''
      #GF_RENDERING_CALLBACK_URL: 'http://grafana:${GRAFANA_PORT}/'
      #GF_RENDERING_SERVER_URL: 'http://renderer:8081/render'
      GF_SERVER_ENABLE_GZIP: 'true'
      GF_SNAPSHOTS_EXTERNAL_ENABLED: 'false'
      GF_UNIFIED_ALERTING_ENABLED: 'true'
      # Disable all login prompts and security features
      # !!! THIS IS ONLY SUITABLE FOR LOCAL TESTING !!!
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
      GF_AUTH_ANONYMOUS_ORG_ROLE: 'Admin'
      GF_AUTH_BASIC_ENABLED: 'true'
      GF_AUTH_DISABLE_LOGIN_FORM: 'true'
      GF_AUTH_DISABLE_SIGNOUT_MENU: 'true'
      GF_SECURITY_DISABLE_GRAVATAR: 'true'
      GF_USERS_ALLOW_SIGN_UP: 'false'
    ports:
      - '${GRAFANA_PORT}:3000'
    healthcheck:
      test: ["CMD-SHELL", 'wget -q --spider http://127.0.0.1:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  prometheus:
    image: 'quay.io/prometheus/prometheus:v2.37.8'
    container_name: 'prometheus'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.listen-address=0.0.0.0:9090'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    secrets:
      - nexus_admin
      - sonar_web_systempasscode
    volumes:
      - 'prometheus-data:/prometheus'
      - './prometheus:/etc/prometheus:ro'
    ports:
      - '${PROMETHEUS_PORT}:9090'
    healthcheck:
      test: ["CMD-SHELL", 'wget -q --spider http://127.0.0.1:9090/-/ready || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  #renderer:
  #  image: 'grafana/grafana-image-renderer:3.7.1'
  #  container_name: 'renderer'
  #  expose:
  #    - '8081'
  #  environment:
  #    BROWSER_TZ: 'Europe/London'
  #    ENABLE_METRICS: 'true'
  #    IGNORE_HTTPS_ERROR: 'true'
  #    LOG_LEVEL: 'info'
  #    RENDERING_MODE: 'reusable'
  #  healthcheck:
  #    test: ["CMD-SHELL", 'wget -q --spider http://127.0.0.1:8081/metrics || exit 1']
  #    interval: 30s
  #    timeout: 10s
  #    retries: 3
  #    start_period: 10s

  # exporter can double as statsd daemon
  # Intent was to get job metrics but not required if using the Prometheus plugin
  statsd:
    image: 'quay.io/prometheus/statsd-exporter:v0.24.0'
    container_name: 'statsd'
    command:
      - --web.enable-lifecycle
      - --statsd.mapping-config=/tmp/statsd_mapping.yml
    volumes:
      - './statsd/statsd_mapping.yml:/tmp/statsd_mapping.yml'
    expose:
      - '9102'
      - '9125'
      - '9125/udp'
    healthcheck:
      test: ["CMD-SHELL", 'wget -q --spider http://127.0.0.1:9102/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  #influxdb_exporter:
  #  image: 'quay.io/prometheus/influxdb-exporter:v0.11.4'
  #  container_name: 'influxdb'
  #  command:
  #    - --timestamps
  #  expose:
  #    - '9122'
  #  healthcheck:
  #    test: ["CMD-SHELL", 'wget -q --spider http://127.0.0.1:9122/ || exit 1']
  #    interval: 30s
  #    timeout: 10s
  #    retries: 3
  #    start_period: 10s

  postgres_exporter:
    image: 'quay.io/prometheuscommunity/postgres-exporter:v0.12.1'
    container_name: 'pg_exporter'
    command:
      - --auto-discover-databases
    environment:
      DATA_SOURCE_URI: "db/postgres?sslmode=disable"
      DATA_SOURCE_USER: 'monitor'
      DATA_SOURCE_PASS_FILE: '/run/secrets/db_monitor'
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: 'true'
    ports:
      - '9187:9187'
    healthcheck:
      test: ["CMD-SHELL", 'wget -q --spider http://127.0.0.1:9187/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    secrets:
      - db_monitor

  blackbox_exporter:
    image: 'quay.io/prometheus/blackbox-exporter:v0.24.0'
    container_name: 'blackbox_exporter'
    entrypoint: '/etc/blackbox_exporter/entrypoint.sh'
    command:
      - --config.file=/tmp/config.yml
    expose:
      - '9115/tcp'
    healthcheck:
      test: ["CMD-SHELL", 'wget -q --spider http://127.0.0.1:9115/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    secrets:
      - sonar_web_systempasscode
    volumes:
      - './blackbox:/etc/blackbox_exporter:ro'

volumes:
  alertmanager-data:
  grafana-data:
  prometheus-data:

secrets:
  db_monitor:
    file: './db/monitor.secret'
  db_grafanaro:
    file: './db/grafanaro.secret'
  nexus_admin:
    file: './nexus/admin.secret'
  sonar_web_systempasscode:
    file: './sonarqube/web_systempasscode.secret'
