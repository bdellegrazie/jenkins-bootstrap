---
configuration-as-code:
  version: 1

jenkins:
  agentProtocols:
    - "JNLP4-connect"
    - "Ping"
  clouds:
    - docker:
        name: "docker"
        dockerApi:
          dockerHost:
            uri: "unix:///var/run/docker.sock"
        templates:
          - labelString: "docker-agent"
            name: docker
            connector:
              attach:
                user: "jenkins"
            dockerTemplateBase:
              image: "jenkins/inbound-agent"
              network: "jenkins-bootstrap_default"
              volumes: ~
              environmentsString: ~
            instanceCapStr: "10"
            nodeProperties:
              - platformLabeler:
                  labelConfig:
                    windowsFeatureUpdate: false
            remoteFs: "/home/jenkins/agent"
            removeVolumes: true
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: true
  disableRememberMe: true
  globalNodeProperties:
    - platformLabeler:
        labelConfig:
          version: false
    - envVars:
        env:
          - key: "CI"
            value: "true"
          - key: "CI_TYPE"
            value: "jenkins"
          - key: "DTRACK_API_URL"
            value: "${DTRACK_API_URL_INTERNAL}"
  markupFormatter:
    rawHtml:
      disableSyntaxHighlighting: false
  mode: NORMAL
  noUsageStatistics: true
  numExecutors: 2
  projectNamingStrategy:
    roleBased:
      forceExistingJobs: true
  slaveAgentPort: -1
  systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code Plugin\n\n"

security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: true
  gitHooks:
    allowedOnAgents: false
    allowedOnController: false
  gitHostKeyVerificationConfiguration:
    sshHostKeyVerificationStrategy: "noHostKeyVerificationStrategy"
  globalJobDslSecurityConfiguration:
    useScriptSecurity: true
  queueItemAuthenticator:
    authenticators:
      - global:
          strategy: "triggeringUsersAuthorizationStrategy"
  sSHD:
    port: -1
  scriptApproval:
    approvedScriptHashes: []

credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: jenkins_bootstrap_deploy_key
              username: git
              passphrase: ~
              description: "Jenkins Bootstrap Deploy Key"
              privateKeySource:
                directEntry:
                  privateKey: ${bootstrap_ssh_deploy_key}
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: gradle_java_sample_deploy_key
              username: git
              passphrase: ~
              description: "Gradle Java Sample Deploy Key"
              privateKeySource:
                directEntry:
                  privateKey: ${gradle_java_sample_ssh_deploy_key}
          - usernamePassword:
              scope: GLOBAL
              id: dependency_check_db_admin
              username: dcadmin
              password: "${db_dcadmin}"
          - usernamePassword:
              scope: GLOBAL
              id: dependency_check_db_user
              username: dcuser
              password: "${db_dcuser}"
          - string:
              scope: GLOBAL
              id: dtrack_apikey
              secret: "${dtrack_apikey}"
          - string:
              scope: GLOBAL
              id: sonar_ci_token
              secret: "${sonar_ci_token}"

unclassified:
  buildDiscarders:
    configuredBuildDiscarders:
      - "jobBuildDiscarder"
  buildStatusConfig:
    dbVersion: 2
    enableGithub: false
    enableHttp: false
    enableInfluxDb: false
    enableStatsd: true
    httpVerifySSL: false
    ignoreSendingTestCoverageToInflux: false
    ignoreSendingTestResultsToInflux: true
    statsdBucket: "jenkins"
    statsdHost: "statsd"
    statsdMaxSize: "1400"
    statsdPort: "9125"
  defaultFolderConfiguration:
    healthMetrics:
      - worstChildHealthMetric:
          recursive: true
  dependencyTrackPublisher:
    dependencyTrackApiKey: "dtrack_apikey"  # pragma: allowlist secret
    dependencyTrackAutoCreateProjects: true
    dependencyTrackConnectionTimeout: 30
    dependencyTrackFrontendUrl: "${DTRACK_PUBLIC_URL}"
    dependencyTrackPollingInterval: 10
    dependencyTrackPollingTimeout: 5
    dependencyTrackReadTimeout: 30
    dependencyTrackUrl: "${DTRACK_API_URL_INTERNAL}"
  gitHubConfiguration:
    apiRateLimitChecker: ThrottleForNormalize
  gitHubPluginConfig:
    hookUrl: "${JENKINS_PUBLIC_URL}/github-webhook/"
  globalConfigFiles:
    configs:
      - properties:
          content: |
            data.connection_string=jdbc:postgresql://db/dependencycheck
            data.driver_name=org.postgresql.Driver
            data.user=^${DB_DC_USR}
            data.password=^${DB_DC_PSW}
          id: "dependency-check-props"
          isReplaceAll: true
          name: "DependencyCheckProps"
          providerId: "org.jenkinsci.plugins.configfiles.properties.PropertiesConfig"
  globalDatabaseConfiguration:
    database:
      postgreSQL:
        database: "${DB_NAME}"
        hostname: "${DB_HOSTNAME}"
        password: "${db_jenkins}"
        username: "${DB_USERNAME}"
        validationQuery: "SELECT 1"
  globalDefaultFlowDurabilityLevel:
    durabilityHint: PERFORMANCE_OPTIMIZED
  junitTestResultStorage:
    storage:
      database:
        skipCleanupRunsOnDeletion: true
  location:
    adminAddress: brett.dellegrazie+jenkins@gmail.com
    url: "${JENKINS_PUBLIC_URL}"
  platformLabelerGlobalConfiguration:
    labelConfig:
      version: false
  prometheusConfiguration:
    appendParamLabel: false
    appendStatusLabel: true
    collectDiskUsage: true
    collectingMetricsPeriodInSeconds: 120
    countAbortedBuilds: true
    countFailedBuilds: true
    countNotBuiltBuilds: true
    countSuccessfulBuilds: true
    countUnstableBuilds: true
    defaultNamespace: "default"
    fetchTestResults: true
    jobAttributeName: "jenkins_job"
    path: "prometheus"
    perBuildMetrics: true
    processingDisabledBuilds: false
    useAuthenticatedEndpoint: false
  scmGit:
    globalConfigEmail: "brett.dellegrazie+jenkins@gmail.com"
    globalConfigName: "Jenkins CI"
  sonarglobalconfiguration:
    buildWrapperEnabled: true
    installations:
      - name: "default"
        credentialsId: 'sonar_ci_token'
        serverUrl: "http://sonarqube:9000"
        triggers:
          skipScmCause: false
          skipUpstreamCause: false
  timestamper:
    allPipelines: true
    systemTimeFormat: "yyyy-MM-dd HH:mm:ss.SSS' | '"
